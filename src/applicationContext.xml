<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
	http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-2.5.xsd"
	>
	 
	  <context:component-scan base-package="com.jrmapp.action" />  
	<!-- 使用外部文件配置数据源的属性 -->
	<!--   换成<context:property-placeholder location="classpath:database_conn.properties"/> 这样的方式载入
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:database_conn.properties</value>
			</list>
		</property>
		<property name="fileEncoding" value="utf-8" />
	</bean>
	 -->
   <context:property-placeholder location="classpath:database_conn.properties"/> 

	<!-- 配置数据源 
	   <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
	<property name="jndiName" value="java:comp/env/jrmAppDB"/>
   </bean>
   -->
   <!-- 从spring2.0开始提供jee命名空间，可以简化配置如下： -->
<jee:jndi-lookup id="dataSource" jndi-name="java:comp/env/jrmAppDB"/> 


<!-- 
  <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
    <property name="driverClassName">
      <value>oracle.jdbc.driver.OracleDriver</value>
    </property>
    <property name="url">
      <value>jdbc:oracle:thin:@localhost:1521:javaee</value>
    </property>
    <property name="username">
      <value>javaee</value>
    </property>
    <property name="password">
      <value>javaee</value>
    </property>
  </bean>
	 -->
	<!-- 
	 <bean id="dataSource" class="com.jolbox.bonecp.provider.BoneCPConnectionProvider" >
    <property name="driverClassName">
      <value>oracle.jdbc.driver.OracleDriver</value>
    </property>
    <property name="url">
      <value>jdbc:oracle:thin:@localhost:1521:javaee</value>
    </property>
    <property name="username">
      <value>javaee</value>
    </property>
    <property name="password">
      <value>javaee</value>
    </property>
  </bean>
   -->
	<!-- hibernate3 sessionfactory配置 
		使用AnnotationSessionFactoryBean创建基于JPA注解的SessionFactory-->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<!-- 引用数据源 -->
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		
		<property name="namingStrategy">
			<bean class="org.hibernate.cfg.ImprovedNamingStrategy" />
		</property>
		<!-- hibernate的属性具体见hibernate文档 -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">
					${hibernate.dialect}
				</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
                <!-- 非0值 指定jdbc抓取数量的大小调用Statement.setFetchSize() -->
				<prop key="hibernate.jdbc.fetch_size">${hibernate.jdbc.fetch_size}</prop>
				<!-- jdbc批量更新 建议5到30 -->
				<prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
				<prop key="hibernate.query.factory_class">  
            org.hibernate.hql.classic.ClassicQueryTranslatorFactory  
        </prop>  
				<!--说明一下：如果不设置查询缓存，那么hibernate只会缓存使用load()方法获得的单个持久化对象
                                                      如果想缓存使用findall()、list()、Iterator()、createCriteria()、createQuery()
                                                      等方法获得的数据结果集的话就需要设置hibernate.cache.use_query_cache true 才行  -->
				<prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
		
				  <!--  使用hibernate自带cache，适合测试用
                    <prop key="hibernate.cache.provider_class">
                          org.hibernate.cache.HashtableCacheProvider
                    </prop>
                -->
                <!--  使用ehcache，适合项目用 -->
				<prop key="hibernate.cache.provider_class">${hibernate.cache.provider_class}</prop>
                <prop key="hibernate.cache.provider_configuration_file_resource_path">
                   ${hibernate.ehcache_config_file}
                </prop>
                <!--  打开hibernate统计功能，我们测试中使用hibernate的统计类-->
                <prop key="hibernate.generate_statistics">true</prop>
                <!--  最优化二级缓存-->
                <prop key="hibernate.cache.use_structured_entries">
                    true
                </prop>
                <!--  完全禁用二级缓存开关，对那些在类的映射定义中指定cache的类，默认开启二级缓存-->
                 <prop key="cache.use_second_level_cache">true</prop>
                
                 <!-- Create/update the database tables automatically when the JVM starts up   --> 
               <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop> 
               <!-- 
               <prop key="hibernate.connection.provider_class">
org.hibernate.connection.C3P0ConnectionProvider</prop>
<prop key="hibernate.c3p0.min_size">8</prop>
<prop key="hibernate.c3p0.max_size">200</prop>
<prop key="hibernate.c3p0.timeout">600</prop>
<prop key="hibernate.c3p0.max_statements">0</prop>
<prop key="hibernate.c3p0.idle_test_period">60</prop>
<prop key="hibernate.c3p0.acquire_increment">2</prop>
<prop key="hibernate.c3p0.validate">true</prop>
 -->
 <prop key="bonecp.idleMaxAge">240</prop>
			<prop key="bonecp.idleConnectionTestPeriod">60</prop>
			<prop key="bonecp.partitionCount">3</prop>
			<prop key="bonecp.acquireIncrement">10</prop>
			<prop key="bonecp.maxConnectionsPerPartition">60</prop>
 			<prop key="bonecp.minConnectionsPerPartition">20</prop>
 			<prop key="bonecp.statementsCacheSize">50</prop>
 			<prop key="bonecp.releaseHelperThreads">3</prop>
			</props>
		</property>
		
		<property name="packagesToScan" value="com.jrmapp.pojo" />
	</bean>
   
    <!-- 加载spring功能列表文件 -->
    <import resource="applicationContext-list.xml"/>
</beans>